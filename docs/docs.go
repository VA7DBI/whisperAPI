// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://openradiomap.com/tos/",
        "contact": {
            "name": "Darcy Buskermolen",
            "email": "darcy@dbitech.ca"
        },
        "license": {
            "name": "BSD-3-Clause",
            "url": "https://github.com/VA7DBI/whisperAPI/blob/main/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Get API health status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check endpoint",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.HealthResponse"
                        }
                    }
                }
            }
        },
        "/transcribe": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Converts audio file to text using Whisper AI model. Supports WAV, MP3, OGG (Vorbis), and Opus formats.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transcription"
                ],
                "summary": "Transcribe audio to text",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Audio file to transcribe (WAV, MP3, OGG Vorbis, or Opus format)",
                        "name": "audio",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful transcription with metadata",
                        "schema": {
                            "$ref": "#/definitions/main.TranscriptionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request (missing file, file too large)",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid or missing API key)",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error during processing",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "audio.AudioMetadata": {
            "type": "object",
            "properties": {
                "bit_depth": {
                    "type": "integer"
                },
                "bitrate_kbps": {
                    "type": "integer"
                },
                "channels": {
                    "type": "integer"
                },
                "codec": {
                    "type": "string"
                },
                "duration_seconds": {
                    "type": "number"
                },
                "format": {
                    "type": "string"
                },
                "original_size_bytes": {
                    "type": "integer"
                },
                "sample_rate": {
                    "type": "integer"
                }
            }
        },
        "main.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "main.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "main.MemStats": {
            "type": "object",
            "properties": {
                "allocated_mb": {
                    "type": "number"
                },
                "gc_cycles": {
                    "type": "integer"
                },
                "gc_pause_micros": {
                    "type": "integer"
                },
                "heap_in_use_mb": {
                    "type": "number"
                },
                "stack_in_use_mb": {
                    "type": "number"
                },
                "system_mb": {
                    "type": "number"
                },
                "total_alloc_mb": {
                    "type": "number"
                }
            }
        },
        "main.SegmentInfo": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "start_time": {
                    "type": "number"
                },
                "text": {
                    "type": "string"
                },
                "tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.TokenInfo"
                    }
                }
            }
        },
        "main.TokenInfo": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "number"
                },
                "probability": {
                    "type": "number"
                },
                "start_time": {
                    "type": "number"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "main.TranscriptionResponse": {
            "type": "object",
            "properties": {
                "audio_info": {
                    "description": "Updated to use audio package type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/audio.AudioMetadata"
                        }
                    ]
                },
                "compute_time": {
                    "type": "object",
                    "properties": {
                        "cpu_time_seconds": {
                            "type": "number"
                        },
                        "gpu_time_seconds": {
                            "type": "number"
                        }
                    }
                },
                "confidence": {
                    "type": "number"
                },
                "duration_seconds": {
                    "type": "number"
                },
                "memory_usage": {
                    "$ref": "#/definitions/main.MemStats"
                },
                "processing_time_seconds": {
                    "type": "number"
                },
                "segments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.SegmentInfo"
                    }
                },
                "text": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.1",
	Host:             "api.openradiomap.com",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Whisper API Service",
	Description:      "A self-hosted voice-to-text transcription service using Whisper AI. Supports WAV, MP3, OGG (Vorbis), and Opus formats.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
